using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.AspNetCore.Http;using Microsoft.AspNetCore.Mvc;using Microsoft.EntityFrameworkCore;using BusinessObject;namespace eStoreAPI.Controllers{    [Route("api/[controller]")]    [ApiController]    public class OrderDetailController : ControllerBase    {        private readonly FStoreDBContext _context;        public OrderDetailController(FStoreDBContext context)        {            _context = context;        }        // GET: api/OrderDetail        [HttpGet]        public async Task<ActionResult<IEnumerable<OrderDetail>>> GetOrderDetails()        {          if (_context.OrderDetails == null)          {              return NotFound();          }            return await _context.OrderDetails.ToListAsync();        }        // GET: api/OrderDetail/5        [HttpGet("{id}")]        public async Task<ActionResult<OrderDetail>> GetOrderDetail(int id)        {          if (_context.OrderDetails == null)          {              return NotFound();          }            var orderDetail = await _context.OrderDetails.FindAsync(id);            if (orderDetail == null)            {                return NotFound();            }            return orderDetail;        }        // PUT: api/OrderDetail/5        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754        [HttpPut("{id}")]        public async Task<IActionResult> PutOrderDetail(int id, OrderDetail orderDetail)        {            if (id != orderDetail.OrderId)            {                return BadRequest();            }            _context.Entry(orderDetail).State = EntityState.Modified;            try            {                await _context.SaveChangesAsync();            }            catch (DbUpdateConcurrencyException)            {                if (!OrderDetailExists(id))                {                    return NotFound();                }                else                {                    throw;                }            }            return NoContent();        }        // POST: api/OrderDetail        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754        [HttpPost]        public async Task<ActionResult<OrderDetail>> PostOrderDetail(OrderDetail orderDetail)        {          if (_context.OrderDetails == null)          {              return Problem("Entity set 'FStoreDBContext.OrderDetails'  is null.");          }            _context.OrderDetails.Add(orderDetail);            try            {                await _context.SaveChangesAsync();            }            catch (DbUpdateException)            {                if (OrderDetailExists(orderDetail.OrderId))                {                    return Conflict();                }                else                {                    throw;                }            }            return CreatedAtAction("GetOrderDetail", new { id = orderDetail.OrderId }, orderDetail);        }        // DELETE: api/OrderDetail/5        [HttpDelete("{id}")]        public async Task<IActionResult> DeleteOrderDetail(int id)        {            if (_context.OrderDetails == null)            {                return NotFound();            }            var orderDetail = await _context.OrderDetails.FindAsync(id);            if (orderDetail == null)            {                return NotFound();            }            _context.OrderDetails.Remove(orderDetail);            await _context.SaveChangesAsync();            return NoContent();        }        private bool OrderDetailExists(int id)        {            return (_context.OrderDetails?.Any(e => e.OrderId == id)).GetValueOrDefault();        }    }}